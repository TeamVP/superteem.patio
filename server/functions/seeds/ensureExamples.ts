// @ts-expect-error Generated by Convex codegen at runtime
import { mutation } from '../../_generated/server';
// Reuse validation utilities by dynamic import to avoid server build cycle issues

// Inserts example templates if they do not already exist by title.
// Reads raw JSON templates from spec/examples/templates via dynamic import (server bundle).

export const ensureExamples = mutation({
  args: {},
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  handler: async (ctx: any) => {
    const existing = await ctx.db.query('templates').collect();
    const titles = new Set(existing.map((t: unknown) => (t as { title?: string }).title));
    const examples: Array<{ file: string; data: unknown }> = [];
    const files = [
      'interdisciplinary-care-survey.json',
      'sibr-observation.json',
      'sibr-readiness-survey.json',
    ];
    for (const f of files) {
      const mod = await import(`../../../spec/examples/templates/${f}`);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      examples.push({ file: f, data: (mod as any).default || mod });
    }
    let created = 0;
    for (const ex of examples) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let raw: any = ex.data;
      // Some fixtures are arrays of questions; wrap them.
      if (Array.isArray(raw)) {
        raw = {
          title: ex.file.replace(/\.json$/, ''),
          type: 'survey',
          version: '1',
          body: raw,
        };
      }
      if (!raw.title || titles.has(raw.title)) continue;
      // Basic structural validation: ensure body is array and each item has type
      if (
        !Array.isArray(raw.body) ||
        raw.body.some((q: unknown) => !(q as { type?: string }).type)
      ) {
        continue; // skip invalid
      }
      await ctx.db.insert('templates', {
        title: raw.title,
        type: raw.type || 'survey',
        version: raw.version || '1',
        body: raw.body || [],
        createdAt: Date.now(),
      });
      created++;
    }
    return { created };
  },
});
